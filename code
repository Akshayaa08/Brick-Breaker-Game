package application;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;
public class Main extends Application {
    private static final int WIDTH = 600;
    private static final int HEIGHT = 400;
    private static final int PADDLE_WIDTH = 100;
    private static final int PADDLE_HEIGHT = 10;
    private static final int BALL_RADIUS = 10;
    private static final int BRICK_HEIGHT = 20;
    private double ballSpeedX = 2;
    private double ballSpeedY = 2;
    private Circle ball;
    private Rectangle paddle;
    private Rectangle[][] bricks;
    private Pane root;
    private int score = 0;
    private Text scoreText;
    private Button startButton;
    private Button restartButton;
    private Text gameTitle;

    private boolean movePaddleLeft = false;
    private boolean movePaddleRight = false;
    private Timeline timeline;
    public static void main(String[] args) {
        launch(args);
    }
    public void start(Stage primaryStage) {
        root = new Pane();
        Scene scene = new Scene(root, WIDTH, HEIGHT);
        createGameTitle();
        createStartButton();
        scene.setOnKeyPressed(e -> handleKeyPress(e.getCode()));
        scene.setOnKeyReleased(e -> handleKeyRelease(e.getCode()));
        primaryStage.setTitle("Brick Breaker Game");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    private void createGameTitle() {
        gameTitle = new Text(WIDTH / 2 - 75, HEIGHT / 2 - 30, "Brick Breaker Game");
        gameTitle.setFont(Font.font("Arial", 18));
        gameTitle.setFill(Color.BLACK);
        root.getChildren().add(gameTitle);
    }
    private void createStartButton() {
        startButton = new Button("Start");
        startButton.setLayoutX(WIDTH / 2 - 25);
        startButton.setLayoutY(HEIGHT / 2);
        startButton.setOnAction(event -> startGame());
        root.getChildren().add(startButton);
    }
    private void startGame() {
        root.getChildren().remove(startButton);
        root.getChildren().remove(gameTitle);
        createBall();
        createPaddle();
        createBricks();
        createScoreText();
        createRestartButton();

        root.getChildren().addAll(ball, paddle, scoreText);
        for (Rectangle[] row : bricks) {
            root.getChildren().addAll(row);
        }
        timeline = new Timeline(new KeyFrame(Duration.millis(10), event -> moveBall()));
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
        root.requestFocus();
    }
    private void createBall() {
        ball = new Circle(BALL_RADIUS, Color.BLUE);
        ball.relocate(WIDTH / 2 - BALL_RADIUS, HEIGHT / 2 - BALL_RADIUS);
    }
    private void createPaddle() {
        paddle = new Rectangle(PADDLE_WIDTH, PADDLE_HEIGHT, Color.GREEN);
        paddle.setX((WIDTH - PADDLE_WIDTH) / 2); // Start at the center of the window
        paddle.setY(HEIGHT - PADDLE_HEIGHT - 10);
    }
    private void createBricks() {
        int numRows = 5;
        int numCols = 6;
        bricks = new Rectangle[numRows][numCols];

        double brickWidth = (WIDTH - (numCols - 1) * 5) / numCols; // Adding 5 pixels gap
        double brickHeight = BRICK_HEIGHT;
        double gap = 5;
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                bricks[i][j] = new Rectangle(brickWidth, brickHeight, Color.RED);
                double x = j * (brickWidth + gap);
                double y = i * (brickHeight + gap);
                bricks[i][j].relocate(x, y);
            }
        }
    }
    private void createScoreText() {
        scoreText = new Text(WIDTH - 80, 20, "Score: 0");
        scoreText.setFill(Color.WHITE);
    }
    private void createRestartButton() {
        restartButton = new Button("Restart");
        restartButton.setLayoutX(WIDTH / 2 - 50);
        restartButton.setLayoutY(HEIGHT / 2 + 30);
        restartButton.setOnAction(event -> restartGame());
    }
    private void handleKeyPress(KeyCode code) {
        switch (code) {
            case LEFT:
                movePaddleLeft = true;
                break;
            case RIGHT:
                movePaddleRight = true;
                break;
        }
    }
    private void handleKeyRelease(KeyCode code) {
        switch (code) {
            case LEFT:
                movePaddleLeft = false;
                break;
            case RIGHT:
                movePaddleRight = false;
                break;
        }
    }
    private void movePaddle() {
        double paddleSpeed = 5.0;
        double maxX = root.getWidth() - PADDLE_WIDTH;
        if (movePaddleLeft && paddle.getX() > 0) {
            paddle.setX(paddle.getX() - paddleSpeed);
        }

        if (movePaddleRight && paddle.getX() < maxX) {
            paddle.setX(paddle.getX() + paddleSpeed);
        }
    }
    private void moveBall() {
        ball.setLayoutX(ball.getLayoutX() + ballSpeedX);
        ball.setLayoutY(ball.getLayoutY() + ballSpeedY);

        if (ball.getBoundsInParent().getMinX() <= 0 || ball.getBoundsInParent().getMaxX() >= WIDTH) {
            ballSpeedX = -ballSpeedX;
        }
        if (ball.getBoundsInParent().getMinY() <= 0) {
            ballSpeedY = -ballSpeedY;
        }
        if (ball.getBoundsInParent().getMaxY() >= HEIGHT) {
            displayGameOver();
        }
        if (ball.getBoundsInParent().intersects(paddle.getBoundsInParent())) {
            ballSpeedY = -ballSpeedY; 
        }
        movePaddle();
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 6; j++) {
                if (bricks[i][j] != null && ball.getBoundsInParent().intersects(bricks[i][j].getBoundsInParent())) {
                    root.getChildren().remove(bricks[i][j]);
                    bricks[i][j] = null;
                    ballSpeedY = -ballSpeedY;
                    increaseScore();
                }
            }
        }
    }

    private void increaseScore() {
        score += 5;
        scoreText.setText("Score: " + score);
    }

    private void displayGameOver() {
        root.getChildren().clear();
        Text gameOverText = new Text(WIDTH / 2 - 50, HEIGHT / 2 - 20, "Game Over");
        Text finalScoreText = new Text(WIDTH / 2 - 50, HEIGHT / 2 + 20, "Final Score: " + score);
        root.getChildren().addAll(gameOverText, finalScoreText, restartButton);
        timeline.stop();
    }

    private void restartGame() {
        root.getChildren().clear();
        score = 0;
        createGameTitle();
        createStartButton();
    }
}
